#!/bin/bash

CUR_DIR=${0%/*}
CUR_NAME=${0##*/}

####### common functions
source ${ROOT_PLUGINS_DIR}/common.sh


readonly SHORT_OPT=":hlon:g:s:r:"
readonly LONG_OPT=":help,list,overwrite,name:group:service:repo:"

_help() {
    cat <<EOF
================================================================================
Usage: valve ${CUR_NAME} {Params}

Params:
    -h, --help                  Display detailed help.

    -n, --name string           (requirement)   fetch draft name. It must use this option. When it fails, help will popup and it will guide you.
        
    
    -g, --group string          (optional)      service group name.
        
    
    -s, --service string        (optional)      service name.
        
    
    -r, --repo string           (optional)      repository URL.
                                                valve finds automatically project's repository. But when you change base repository URL, you can change URL by using this option.
        
    -l, --list                  listing draft module name.

    -o, --overwrite             (optional)      overwrite drafts(charts, Dockerfile, draft.toml, Jenkinsfile). It makes back-up in '.valve-history' directory.
                                                If you check previous drafts when using overwrite option, you should check '.valve-history' directory.

Examples:
    [Mandatory]
    $ cd {PROJECT}
    $ valve fetch --name java-mvn-tomcat
    or
    $ valve fetch -n java-mvn-tomcat

    $ valve fetch --list    

    [Optional]
    $ valve fetch --name java-mvn-tomcat --group sample --service tomcat
    $ valve fetch --name java-mvn-tomcat --group sample --service tomcat --repo {REPO URL}

================================================================================
EOF
}

_run() {

    OPTIONS=$(getopt -l "${LONG_OPT}" -o "${SHORT_OPT}" -a -- "$@")
    eval set -- "${OPTIONS}"
    
    while [ $# -gt 0 ]; do
        case "$1" in
            -n|--name)
                shift;
                PARAM_NAME=$1
                ;;
            -g|--group)
                shift;
                PARAM_GROUP=$1
                ;;
            -s|--service)
                shift;
                PARAM_SERVICE=$1
                ;;
            -r|--repo)
                shift;
                PARAM_REPO=$1
                ;;
            -l|--list)
                _list
                exit 0
                ;;
            -o|--overwrite)
                PARAM_OVERWRITE=1
                ;;
            -h|--help)
                _help
                exit 0
                ;;
        esac
        shift
    done

    if [ ! -v PARAM_NAME ]; then
        _help
        _error "You don't use -n or --name option"
    else
        _fetch
    fi
}

##################################################################################
_fetch(){
    _result "draft package version: ${THIS_VERSION}"

    DIST=/tmp/${THIS_NAME}-draft-${THIS_VERSION}
    LIST=/tmp/${THIS_NAME}-draft-ls

    NAMESPACE="${NAMESPACE:-development}"

    SERVICE_GROUP=$PARAM_GROUP
    SERVICE_NAME=$PARAM_SERVICE
    REPOSITORY_URL=$PARAM_REPO

    __validate

    __pkg_version_check
    __pkg_name_check

    __pkg_variable_gen

    __pkg_copy
    __chart_copy
    
    __pkg_gen
    __chart_gen

    _config_save
    _success 'valve fetch success'
}


############# Start Private function #############
__validate() {      # validate overwrite option
    if (( PARAM_OVERWRITE == 1 )); then
        if [ -f Jenkinsfile ]; then
            if [ ! -d .valve-history ]; then
                mkdir -p .valve-history
            fi
            cp -r charts/ .valve-history/
            cp -r Dockerfile .valve-history
            cp -r draft.toml .valve-history
            cp -r Jenkinsfile .valve-history
            rm -rf charts/ Dockerfile draft.toml Jenkinsfile
        fi
    else
        if [ -f Jenkinsfile ]; then
            _error "Warning!!\nThere is existing chart & Dockerfile & Jenkinsfile. If you want to replace all to new one, Use --overwrite or -o option.\nOverwrite option will copy backup in .valve_history directory."
        fi
    fi
}
__pkg_version_check() {
    if [ "${THIS_VERSION}" == "v0.0.0" ]; then      # Use local draft
        if [ ! -d ${SHELL_DIR}/draft ]; then
            _error
        fi

        rm -rf ${DIST}
        mkdir -p ${DIST}

        
        _command "cp -rf ${SHELL_DIR}/draft/* ${DIST}"  # copy local draft
        cp -rf ${SHELL_DIR}/draft/* ${DIST}

        _result "local package used."
    else        # Use release version
        if [ ! -d ${DIST} ]; then   
            echo
            mkdir -p ${DIST}

            # download
            pushd ${DIST}
            curl -sL https://github.com/${THIS_REPO}/${THIS_NAME}/releases/download/${THIS_VERSION}/draft.tar.gz | tar xz
            popd

            _result "draft package downloaded."
        fi
    fi
}

__pkg_name_check() {
    ls ${DIST} | sort > ${LIST}     # create LIST
    IDX=0
    CNT=`wc -l < ${LIST}`
    while read VAL; do
        if ! [[ ${PARAM_NAME} =~ $VAL ]]; then
            IDX=$((IDX+1))
        fi
    done < ${LIST}

    if [ $IDX == $CNT ]; then       # Check name if doesn't match.
        _result "Draft package: "${PARAM_NAME}
        rm -rf ${DIST}
        _error "Use valve fetch --list / valve fetch -l \n\e[4m${PARAM_NAME}\e[0m draft package doesn't matching anything"
    else        # Check name
        PACKAGE=${PARAM_NAME}
    fi
}

__pkg_variable_gen() {
    if [ "${SERVICE_GROUP}" != "" ] && [ "${SERVICE_NAME}" != "" ]; then
        NAME="${SERVICE_GROUP}-${SERVICE_NAME}"
    fi

    if [ "${NAME}" == "" ]; then
        NAME=$(echo $(basename $(pwd)) | sed 's/\./-/g')
        if [ "${SERVICE_GROUP}" == "" ]; then
            SERVICE_GROUP=$(echo $NAME | cut -d- -f1)
        fi

        if [ "${SERVICE_NAME}" == "" ]; then
            SERVICE_NAME=$(echo $NAME | cut -d- -f2)
        fi
    fi
    
    if [ "${REPOSITORY_URL}" == "" ]; then
        if [ -d .git ]; then
            REPOSITORY_URL=$(git config --get remote.origin.url | head -1 | xargs)
        fi
    fi
}

__pkg_gen() {
    _chart_replace "Jenkinsfile" "def SERVICE_GROUP" "${SERVICE_GROUP}" true    # Replace Jenkinsfile SERVICE_GROUP
    SERVICE_GROUP="${REPLACE_VAL}"

    _chart_replace "Jenkinsfile" "def SERVICE_NAME" "${SERVICE_NAME}" true  # Replace Jenkinsfile SERVICE_NAME
    SERVICE_NAME="${REPLACE_VAL}"

    if [ "${SERVICE_GROUP}" != "" ] && [ "${SERVICE_NAME}" != "" ]; then
        NAME="${SERVICE_GROUP}-${SERVICE_NAME}"
    fi
    
    if [ -f draft.toml ] && [ ! -z ${NAME} ]; then  # Replace draft.toml NAME
        _replace "s|NAMESPACE|${NAMESPACE}|" draft.toml
        _replace "s|NAME|${NAME}-${NAMESPACE}|" draft.toml
    fi
}

__pkg_copy() {  # copy drafts
    if [ -f ${DIST}/${PACKAGE}/dockerignore ] && [ ! -f .dockerignore ]; then
        cp -rf ${DIST}/${PACKAGE}/dockerignore .dockerignore
    fi
    if [ -f ${DIST}/${PACKAGE}/draftignore ] && [ ! -f .draftignore ]; then
        cp -rf ${DIST}/${PACKAGE}/draftignore .draftignore
    fi
    if [ -f ${DIST}/${PACKAGE}/valvesecret ] && [ ! -f .valvesecret ]; then
        cp -rf ${DIST}/${PACKAGE}/valvesecret .valvesecret
    fi
    if [ -f ${DIST}/${PACKAGE}/Dockerfile ]; then
        cp -rf ${DIST}/${PACKAGE}/Dockerfile Dockerfile
    fi
    if [ -f ${DIST}/${PACKAGE}/Jenkinsfile ]; then
        cp -rf ${DIST}/${PACKAGE}/Jenkinsfile Jenkinsfile
    fi
    if [ -f ${DIST}/${PACKAGE}/draft.toml ]; then
        cp -rf ${DIST}/${PACKAGE}/draft.toml draft.toml
    fi
}

__chart_copy() {    # cp charts/acme/ to charts/${NAME}/
    if [ -d ${DIST}/${PACKAGE}/charts ]; then
        mkdir -p charts/${NAME}
        cp -rf ${DIST}/${PACKAGE}/charts/acme/* charts/${NAME}/
    fi
}

__chart_gen() {
    if [ -d charts ] && [ ! -z ${NAME} ]; then
        # chart name
        _replace "s|name: .*|name: ${NAME}|" charts/${NAME}/Chart.yaml

        # values fullnameOverride
        _replace "s|fullnameOverride: .*|fullnameOverride: ${NAME}|" charts/${NAME}/values.yaml

        # values namespace
        _replace "s|namespace: .*|namespace: ${NAMESPACE}|" charts/${NAME}/values.yaml

        # values repository
        if [ -z ${REGISTRY} ]; then
            _replace "s|repository: .*|repository: ${NAME}|" charts/${NAME}/values.yaml
        else
            _replace "s|repository: .*|repository: ${REGISTRY}/${NAME}|" charts/${NAME}/values.yaml
        fi

        # values host
        _replace "s|subdomain: .*|subdomain: ${NAME}|" charts/${NAME}/values.yaml
        _replace "s|- acme|- ${NAME}|" charts/${NAME}/values.yaml
    fi
}
############# End Private function #############

_chart_replace() {
    REPLACE_FILE=$1
    REPLACE_KEY=$2
    DEFAULT_VAL=$3
    REQUIRED=$4

    # if [ "${DEFAULT_VAL}" == "" ]; then
    #     Q="${REPLACE_KEY} : "
    # else
    #     Q="${REPLACE_KEY} [${DEFAULT_VAL}] : "
    # fi

    # _read "${Q}"

    REPLACE_VAL=${ANSWER:-${DEFAULT_VAL}}

    if [ "${REQUIRED}" == "true" ] && [ "${REPLACE_VAL}" == "" ]; then
        _error "Required: ${REPLACE_KEY}"
    fi

    if [ "${REPLACE_TYPE}" == "yaml" ]; then
        _command "sed -i -e s|${REPLACE_KEY}: .*|${REPLACE_KEY}: ${REPLACE_VAL}| ${REPLACE_FILE}"
        _replace "s|${REPLACE_KEY}: .*|${REPLACE_KEY}: ${REPLACE_VAL}|" ${REPLACE_FILE}
    else
        _command "sed -i -e s|${REPLACE_KEY} = .*|${REPLACE_KEY} = ${REPLACE_VAL}| ${REPLACE_FILE}"
        _replace "s|${REPLACE_KEY} = .*|${REPLACE_KEY} = \"${REPLACE_VAL}\"|" ${REPLACE_FILE}
    fi
}

_list() {
    LIST=/tmp/${THIS_NAME}-draft-ls
    _result "Draft list"
    cat ${LIST}

}

##################################################################################

_run $@

